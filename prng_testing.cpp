#include <iostream>
#include <chrono>
#include <random>
#include <cmath>
#include "PRNG_class/xorshift_prng.h"

void unif_default()
{
    std::default_random_engine generator;
    std::uniform_real_distribution<double> distribution(0.0,1.0);
    double dummy;
    for (int i=0; i<1000000; ++i)
    {
        dummy = distribution(generator);
    }
}

void unif_xorshift()
{
    Xorshift64 prng(1ULL);
    double dummy;
    for (int i=0; i<1000000; ++i)
    {
        dummy = prng.generate_double();
    }
}

void find_execution_time(void(*f)())
{
    using std::chrono::high_resolution_clock;
    using std::chrono::duration_cast;
    using std::chrono::milliseconds;
    auto t1 = high_resolution_clock::now();
    f();
    auto t2 = high_resolution_clock::now();
    auto ms_int = duration_cast<milliseconds>(t2 - t1);
    std::cout << ms_int.count() << "ms\n";
}

void monte_carlo_test()
{
    Xorshift64 prng(1ULL);
    double x, y, pi;
    int m=0, n=0;
    for (int i=0; i<10000000; ++i)
    {
        x = prng.generate_double();
        y = prng.generate_double();
        n += 1;
        if (std::sqrt(x*x+y*y) < 1)
        {
            m += 1;
        }
    }
    pi = 4*(static_cast<double>(m)/static_cast<double>(n));
    std::cout << "The value of pi generated by the monte carlo test is: ";
    std::cout << pi << ", where pi/4 = " << m << "/" << n << "\n\n\n";
}

int main()
{
    std::cout << "Speed test.\n";
    std::cout << "Execution time of default prng: ";
    void (*fcnPtr)(){ &unif_default };
    find_execution_time(fcnPtr);
    std::cout << "Execution time of xorshift64 prng: ";
    fcnPtr = &unif_xorshift;
    find_execution_time(fcnPtr);
    std::cout << "\n" << "Monte Carlo pi test:\n";
    monte_carlo_test();
    std::cout << "Tests complete! Press any key to exit. ";
    std::cin.get();
}